#!/usr/bin/env bash

# @file      overlord
# @brief     A simple git hooks launcher
# @copyright 2024 Alexandre Martos <contact@amartos.fr>
# @license   GPLv3

DEFAULT_LOGS=/var/log/git
OVERLORD_LOGS="${OVERLORD_LOGS:-$DEFAULT_LOGS}"

# Hooks that do not change the action outcome AND for which status
# code is generally not important
BG_HOOKS=(
    "post-applypatch"
    "post-commit"
    "post-merge"
    "post-receive"
    "post-update"
    "p4-post-changelist"
)

# All git hooks
# version: git v2.44.0
# see: https://git-scm.com/docs/githooks
GIT_HOOKS=(
    "applypatch-msg"
    "pre-applypatch"
    ${BG_HOOKS[0]} # post-apply-patch
    "pre-commit"
    "pre-merge-commit"
    "prepare-commit-msg"
    "commit-msg"
    ${BG_HOOKS[1]} # post-commit
    "pre-rebase"
    "post-checkout"
    ${BG_HOOKS[2]} # post-merge
    "pre-push"
    "pre-receive"
    "update"
    "proc-receive"
    ${BG_HOOKS[3]} # post-receive
    ${BG_HOOKS[4]} # post-update
    "reference-transaction"
    "push-to-checkout"
    "pre-auto-gc"
    "post-rewrite"
    "sendemail-validate"
    "fsmonitor-watchman"
    "p4-changelist"
    "p4-prepare-changelist"
    ${BG_HOOKS[4]} # p4-post-changelist
    "p4-pre-submit"
    "post-index-change"
)

USAGE="usage: $(basename $0) [-h] [-v] [-w] HOOK-NAME [HOOK-NAME...]"
VERSION="overlord v1.0.0"
LICENSE=$(cat <<EOF
$VERSION Copyright (C) 2024 Alexandre Martos <contact@amartos.fr>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
EOF
)

# @brief print the usage line on stderr and exit
# @param $@ (optional) a message to print first on stderr
# @exit 1
usage() {
    [ ${#@} -ne 0 ] && >&2 echo -e "$@\n"
    >&2 echo "$USAGE" && exit 1
}

# @brief print the version number on stdout and exit
# @exit 0
version() {
    echo "$VERSION" && exit 0
}

# @brief print the short license text on stdout and exit
# @exit 0
license() {
    echo "$LICENSE" && exit 0
}

# @brief print the help manual on stdout and exit
# @exit 0
phelp() {
    cat <<EOF
$USAGE

This script is designed to be used as a git hooks execution platform.

[DESCRIPTION]

Used directly and given one (or more) hook names, the overlord script
will initialize the current directory for the given hooks execution
through itself.

If named as a git hook (for eg. via symlink or hardlink), it will
execute any script found in the subdirectory "./hook-name.d", passing
any argument and STDIN input to each of them.

Example of the git hooks directory structure:

git-hooks-directory/
|_ overlord
|_ hook-name -> ./overlord
|_ hook-name.d/
   |_ my-script
   |_ my-other-script
   |_ my-other-other-script
   |_ ...

Git hooks not affecting the outcome of the action (including with via
their exit code status) are daemonized when using the overlord script,
allowing for non-blocking hook-name.d scripts executions in those
cases. The daemonized scripts stdout and stderr outputs are logged at
OVERLORD_LOGS/hook-name.log.

[NOTES]

When executed as a git hook, STDIN and arguments are transparently
passed to each hook-name.d script. No analysis nor modifications are
done.

Any non-executable or ".hidden" hook-name.d script is ignored.

An empty hook-name.d directory will not fail the hook, which will
simply exit with a 0 status code.

The full list of supported git hooks:
$(echo ${GIT_HOOKS[@]} | fold -s)

The full list of daemonized git hooks:
$(echo ${BG_HOOKS[@]} | fold -s)

[SCRIPTS EXECUTION ORDER]

The hook-name.d scripts are executed in name order. Should any of
those scripts be executed before any other, you thus have to adapt
their names.

A simple way to order them is to prefix any hook-name.d script with a
number, for example:

git-hooks-directory/
|_ overlord
|_ hook-name -> ./overlord
|_ hook-name.d/
   |_ 00-my-first-script
   |_ 01-my-second-script
   |_ 02-my-third-script
   |_ ...

Communication between the hook-name.d scripts is not handled by the
overlord script.

[EXIT STATUS]

For daemonized git hooks, the main overlord script exits with a 0
status code, regardless of any hook-name.d script exit status
code. However, the background execution will prematurely stop at the
first hook-name.d script exiting with a non-zero status code,
preventing further execution.

For foreground git hooks scripts execution, if any hook-name.d script
exits with a non-zero status code, the main overlord script will
immediately exit with the same status code, preventing further
execution.

[STDIN]

When used as a git hook, STDIN input is transparently passed to each
hook-name.d script. See the git hooks documentation for further
information.

When the overlord script is used directly, STDIN is ignored.

[ARGUMENTS]

If executed as a git hook, the arguments are those of the
corresponding hook, and are transparently passed to each hook-name.d
script. See the git hooks documentation for further information.

When used directly, the arguments expected by the overlord script are:

HOOK-NAME       the name of the git hook to initialize alongside the
                overlord script; you can pass multiple names at once

[OPTIONS]

If executed as a git hook, the options are those of the corresponding
hook, and are transparently passed to each hook-name.d script. See the
git hooks documentation for further information.

When used directly, the overlord script options are:

-h              print this help and exit
-v              print the version number and exit
-w              print the short license text and exit

[ENVIRONMENT]

OVERLORD_LOGS   the daemonized hooks logs root directory;
                defaults to $DEFAULT_LOGS

[BUGS]

In case of issues please contact the maintainer at:
https://github.com/amartos/overlord/issues

[FURTHER READING]

Git hooks documentation: https://git-scm.com/docs/githooks

[COPYRIGHT]

EOF
    license
}

# @brief check if the given string is a git hook name
# @param $1 the string to check
# @exit 1 if the string is not a git hook name
check_hook() {
    grep -qwF "$1" <<<"${GIT_HOOKS[@]}"
}

################################################################################
# Main overlord execution
################################################################################

if ! check_hook $(basename $0)
then
    while getopts "hvw" arg
    do
        case "$arg" in
            h) phelp ;;
            v) version ;;
            w) license ;;
            *) usage ;;
        esac
    done

    [ ${#@} -eq 0 ] && usage "At least one hook name is mandatory"

    HOOKDIR="$(dirname $0)"
    for h in $@
    do
        HOOK="$HOOKDIR/$h"
        ln -s "$0" "$HOOK"
        mkdir -p "$HOOK".d
    done
    exit 0
fi

################################################################################
# Hooks execution
################################################################################

HOOK="$(basename $0)"
check_hook "$HOOK"

HOOKS="$0".d
mkdir -p "$HOOKS"

# No hook-name.d script to execute
[ -z "$(ls $HOOKS)" ] && exit 0

# Daemonize the hook (if not already)
if grep -qF "$HOOK" <<<"${BG_HOOKS[@]}"
then
    mkdir -p "$OVERLORD_LOGS"
    chmod 750 "$OVERLORD_LOGS"
    LOGFILE="$OVERLORD_LOGS/$HOOK.log"
    LOCKFILE="/tmp/$(tr '/' '_' <<<$0).lock"

    if [ ! -f "$LOCKFILE" ]
    then
        touch "$LOCKFILE"
        ($0 $@ <<<"$(cat)" 1>>"$LOGFILE" 2>&1 &)&
        exit 0
    else
        trap "rm $LOCKFILE" EXIT
    fi
fi

# hook-name.d scripts execution
STDIN="$(cat)"
for h in $HOOKS/*
do
    # ignore non-executable scripts
    if [ -x "$h" ]
    then
        echo "$STDIN" | $h $@ || exit $?
    fi
done
